name: 'terratest'
description: 'Run linting, tfsec, and tflint against terraform codebase.'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: 'false'
  terragrunt-version:
    description: 'Terragrunt version, if set will override `.terragrunt-version` value'
    required: false
    default: 'false'
  terraform-version:
    description: 'Terraform version, if set will override `.terraform-version` value'
    required: false
    default: 'false'
  use-dotversion:
    description: "If set to `'true'` then the action will check the root of the repo for `.terragrunt-version` and `.terraform-version` for version information."
    required: false
    default: 'true'
  tfsec-config:
    description: "tfsec config file"
    required: false
    default: '.tfsec.yaml'
  tflint-config:
    description: "tflint config file"
    required: false
    default: '.tflint.hcl'
  github-token:
    required: false
    description: "Github token"
    default: ""
  run-tflint:
    required: false
    default: 'true'
    description: Run tflint
  run-tfsec:
    required: false
    default: 'true'
    description: Run tfsec

runs:
  using: 'composite'
  steps:
    - id: setup
      shell: bash
      run: |
        WORKING_DIR=${{ inputs.working-directory }}
        if [[ "$WORKING_DIR" == "false" ]]; then
          WORKING_DIR="$GITHUB_WORKSPACE"
        fi
        echo "working_directory=$WORKING_DIR" >> $GITHUB_ENV

    - id: versions
      if: ${{ inputs.use-dotversion == 'true' }}
      shell: bash
      run: |
        echo "terraform_version=$(cat .terraform-version)" >> $GITHUB_ENV
        echo "terragrunt_version=$(cat .terragrunt-version)" >> $GITHUB_ENV

    - id: setup-tflint
      if: ${{ inputs.run-tflint == 'true' }}
      uses: terraform-linters/setup-tflint@v2
      with:
        github_token: ${{ inputs.github-token }}

    - id: run-tflint
      if: ${{ inputs.run-tflint == 'true' }}
      name: TFLint
      shell: bash
      working-directory: ${{ env.working_directory }}
      run: |
        tflint --init
        FAIL=false

        TFL_CONFIG=""
        if [[ -f "${{ inputs.tflint-config }}" ]]; then
          TFL_CONFIG="-c $PWD/${{ inputs.tflint-config }}"
        fi

        for DIR in $(find . -type d -not -path '*/.*'); do
          eval tflint "$TFL_CONFIG" -f compact "$DIR"
          if [[ "$?" -ne 0 ]]; then
            echo "No newline: $DIR"
            FAIL=true
          fi
        done

        if [ $FAIL == true ];then
          exit 1
        fi

    - id: tfsec
      if: ${{ inputs.run-tfsec == 'true' }}
      name: TFSec
      uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      with:
        tfsec_args: --force-all-dirs --config-file ${{ inputs.tfsec-config }}
        github_token: ${{ inputs.github-token }}

    - id: setup-tg
      uses: peter-murray/terragrunt-github-action@v1.0.0
      with:
        terragrunt_version: ${{ inputs.terragrunt-version != 'false' && inputs.terragrunt-version || env.terragrunt_version }}

    - id: setup-tf
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version != 'false' && inputs.terraform-version || env.terraform_version }}

    - id: tf-fmt
      name: Terraform fmt
      shell: bash
      working-directory: ${{ env.working_directory }}
      run: terraform fmt -recursive -check

    - id: tf-newlines
      name: Newlines
      shell: bash
      working-directory: ${{ env.working_directory }}
      run: |
        FAIL=false
        for FILE in $(find . -regextype egrep -regex ".*\.(tf|tfvars|hcl)"); do
          if [[ -n $(tail -c1 "$FILE") ]]; then
            echo "No newline: $FILE"
            FAIL=true
          fi
        done

        if [ $FAIL == true ];then
          exit 1
        fi

    - id: tg-fmthcl
      name: Terragrunt fmt
      shell: bash
      working-directory: ${{ env.working_directory }}
      run: terragrunt hclfmt --terragrunt-check
